#!/usr/bin/env bash

set -euo pipefail

# SONiC Unified Command Interface
# Provides workflow-oriented commands for common SONiC operations

SCRIPT_VERSION="2025.08.20-6"
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"

# shellcheck disable=SC1091
. "$SCRIPT_DIR/lib/sonic-common.sh"

usage() {
    cat <<USAGE
SONiC Upgrade Helper - Unified Interface for SONiC Image Management

COMMON WORKFLOWS:
  sonic-upgrade-helper save --output <backup.tar.gz>
      Save current system state to backup file
      
  sonic-upgrade-helper install <image.bin> [--restore <backup.tar.gz>] [--activate]
      Install new SONiC image, optionally restore settings and activate
      
  sonic-upgrade-helper reinstall [--activate] [--dry-run]
      Re-customize current image (useful after config changes)
      
  sonic-upgrade-helper customize [--image <image-dir>] [--activate] [--dry-run]
      Customize SONiC image with current system state

POWER USER WORKFLOWS:
  sonic-upgrade-helper overlay prepare --image <image-dir> [--name <overlay-name>] [--mount]
      Prepare overlay filesystem for image customization
      
  sonic-upgrade-helper overlay activate --image <image-dir> --name <overlay-name>
      Activate prepared overlay as next boot target
      
  sonic-upgrade-helper state backup --output <backup.tar.gz> [--source <root>]
      Create backup of system state components
      
  sonic-upgrade-helper state restore --input <backup.tar.gz> --target <root>
      Restore system state from backup
      
  sonic-upgrade-helper state migrate --source <root> --target <root>
      Migrate system state between filesystems

DEBUG/TESTING WORKFLOWS:
  sonic-upgrade-helper validate [--image <image-dir>]
      Validate system state and tool availability (debug command)

GLOBAL OPTIONS:
  --dry-run, -n         Show what would be done without making changes
  --quiet, -q           Minimize output (implies --no-handholding)
  --help, -h            Show this help

EXAMPLES:
  # Save current setup before upgrade
  sonic-upgrade-helper save --output my-setup.tar.gz
  
  # Install new image with current settings  
  sonic-upgrade-helper install sonic-image-202411.bin --restore my-setup.tar.gz --activate
  
  # Re-customize current image after config changes
  sonic-upgrade-helper reinstall --activate
  
  # Customize newest image and activate it
  sonic-upgrade-helper customize --activate
  
  # Debug: validate current system
  sonic-upgrade-helper validate

For detailed help on specific workflows:
  sonic-upgrade-helper <workflow> --help
USAGE
}

# Workflow implementations
workflow_save() {
    local output="" source_root="/"
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --output) output="$2"; shift ;;
            --source-root) source_root="$2"; shift ;;
            -h|--help) 
                cat <<HELP
sonic save - Save current system state

USAGE:
  sonic save --output <backup.tar.gz> [--source-root <root>]

OPTIONS:
  --output <file>        Output backup file (required)
  --source-root <path>   Source root to backup (default: /)

EXAMPLES:
  sonic save --output my-setup.tar.gz
  sonic save --output test-backup.tar.gz --source-root /tmp/test-root
HELP
                exit 0 ;;
            *) die "Unknown option: $1" ;;
        esac; shift
    done
    
    [[ -n "$output" ]] || die "Missing required --output option"
    
    log "Saving system state to $output"
    "$SCRIPT_DIR/sonic-backup.sh" backup --output "$output" --source-root "$source_root"
}

workflow_reinstall() {
    local activate=0 rw_name="" lower="auto" no_brew=0 no_fan=0
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --activate) activate=1 ;;
            --rw-name) rw_name="$2"; shift ;;
            --lower) lower="$2"; shift ;;
            --no-brew) no_brew=1 ;;
            --no-fancontrol) no_fan=1 ;;
            -h|--help)
                cat <<HELP
sonic-upgrade-helper reinstall - Re-customize current image

USAGE:
  sonic-upgrade-helper reinstall [options]

DESCRIPTION:
  Re-customizes the currently running image with current system state.
  Useful after making configuration changes that you want to persist
  across reboots without installing a new image.

OPTIONS:
  --activate             Activate the customized image as next boot target
  --rw-name <name>       Name for overlay filesystem
  --lower <mode>         Lower layer mode: auto|fs|dir (default: auto)
  --no-brew              Skip Homebrew bootstrap service
  --no-fancontrol        Skip fan control customization

EXAMPLES:
  sonic-upgrade-helper reinstall --activate
  sonic-upgrade-helper reinstall --no-brew --activate
HELP
                exit 0 ;;
            *) die "Unknown option: $1" ;;
        esac; shift
    done
    
    log "Re-customizing current SONiC image"
    
    # Build deploy reinstall command
    local deploy_args=("$SCRIPT_DIR/sonic-deploy.sh" "reinstall")
    [[ -n "$rw_name" ]] && deploy_args+=(--rw-name "$rw_name")
    deploy_args+=(--lower "$lower")
    [[ "$no_brew" -eq 1 ]] && deploy_args+=(--no-brew)
    [[ "$no_fan" -eq 1 ]] && deploy_args+=(--no-fancontrol)
    [[ ${DRY_RUN:-0} -eq 1 ]] && deploy_args+=(--dry-run)
    [[ ${NO_HANDHOLDING:-0} -eq 1 ]] && deploy_args+=(--no-handholding)
    
    "${deploy_args[@]}"
}

workflow_install() {
    local image_bin="" restore_backup="" activate=0
    local rw_name="" lower="auto" no_brew=0 no_fan=0
    
    # First argument should be the image file
    if [[ $# -gt 0 && ! "$1" =~ ^-- ]]; then
        image_bin="$1"; shift
    fi
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --restore) restore_backup="$2"; shift ;;
            --activate) activate=1 ;;
            --rw-name) rw_name="$2"; shift ;;
            --lower) lower="$2"; shift ;;
            --no-brew) no_brew=1 ;;
            --no-fancontrol) no_fan=1 ;;
            -h|--help)
                cat <<HELP
sonic install - Install SONiC image with optional settings restore

USAGE:
  sonic install <image.bin> [options]

OPTIONS:
  --restore <backup>     Restore settings from backup after install
  --activate             Activate the image as next boot target
  --rw-name <name>       Name for overlay filesystem
  --lower <mode>         Lower layer mode: auto|fs|dir (default: auto)
  --no-brew              Skip Homebrew bootstrap service
  --no-fancontrol        Skip fan control customization

EXAMPLES:
  sonic install sonic-202411.bin
  sonic install sonic-202411.bin --restore my-setup.tar.gz --activate
HELP
                exit 0 ;;
            *) die "Unknown option: $1" ;;
        esac; shift
    done
    
    [[ -n "$image_bin" ]] || die "Missing required image file argument"
    [[ -r "$image_bin" ]] || die "Image file not readable: $image_bin"
    
    log "Installing SONiC image: $image_bin"
    
    # Build deploy command
    local deploy_args=("$SCRIPT_DIR/sonic-deploy.sh" "install" "--bin" "$image_bin")
    [[ -n "$rw_name" ]] && deploy_args+=(--rw-name "$rw_name")
    deploy_args+=(--lower "$lower")
    [[ "$no_brew" -eq 1 ]] && deploy_args+=(--no-brew)
    [[ "$no_fan" -eq 1 ]] && deploy_args+=(--no-fancontrol)
    [[ ${DRY_RUN:-0} -eq 1 ]] && deploy_args+=(--dry-run)
    [[ ${NO_HANDHOLDING:-0} -eq 1 ]] && deploy_args+=(--no-handholding)
    
    "${deploy_args[@]}"
    
    # Handle restore if requested
    if [[ -n "$restore_backup" ]]; then
        log "Restoring settings from $restore_backup"
        local restore_args=("$SCRIPT_DIR/sonic-deploy.sh" "restore" "--input" "$restore_backup")
        [[ -n "$rw_name" ]] && restore_args+=(--rw-name "$rw_name")
        restore_args+=(--lower "$lower")
        "${restore_args[@]}"
    fi
}

workflow_customize() {
    local image_dir="" activate=0 rw_name="" lower="auto"
    local no_brew=0 no_fan=0
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --image) image_dir="$2"; shift ;;
            --activate) activate=1 ;;
            --rw-name) rw_name="$2"; shift ;;
            --lower) lower="$2"; shift ;;
            --no-brew) no_brew=1 ;;
            --no-fancontrol) no_fan=1 ;;
            -h|--help)
                cat <<HELP
sonic customize - Customize SONiC image with current system state

USAGE:
  sonic customize [options]

OPTIONS:
  --image <dir>          Image directory to customize (default: newest)
  --activate             Activate customized image as next boot target
  --rw-name <name>       Name for overlay filesystem
  --lower <mode>         Lower layer mode: auto|fs|dir (default: auto)
  --no-brew              Skip Homebrew bootstrap service
  --no-fancontrol        Skip fan control customization

EXAMPLES:
  sonic customize --activate
  sonic customize --image /host/image-sonic-202411 --activate
HELP
                exit 0 ;;
            *) die "Unknown option: $1" ;;
        esac; shift
    done
    
    log "Customizing SONiC image"
    
    # Build customize command
    local customize_args=("$SCRIPT_DIR/sonic-offline-customize.sh")
    [[ -n "$image_dir" ]] && customize_args+=(--image-dir "$image_dir")
    [[ -n "$rw_name" ]] && customize_args+=(--rw-name "$rw_name")
    customize_args+=(--lower "$lower")
    [[ "$activate" -eq 1 ]] && customize_args+=(--activate)
    [[ "$no_brew" -eq 1 ]] && customize_args+=(--no-brew)
    [[ "$no_fan" -eq 1 ]] && customize_args+=(--no-fancontrol)
    [[ ${DRY_RUN:-0} -eq 1 ]] && customize_args+=(--dry-run)
    [[ ${NO_HANDHOLDING:-0} -eq 1 ]] && customize_args+=(--no-handholding)
    
    "${customize_args[@]}"
}

workflow_validate() {
    local image_dir="" source_root="/"
    
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --image) image_dir="$2"; shift ;;
            --source) source_root="$2"; shift ;;
            -h|--help)
                cat <<HELP
sonic validate - Validate SONiC system or image

USAGE:
  sonic validate [options]

OPTIONS:
  --image <dir>          Validate specific image directory
  --source <root>        Source root to validate (default: /)

EXAMPLES:
  sonic validate                                    # Validate current system
  sonic validate --image /host/image-sonic-202411  # Validate specific image
HELP
                exit 0 ;;
            *) die "Unknown option: $1" ;;
        esac; shift
    done
    
    if [[ -n "$image_dir" ]]; then
        log "Validating image: $image_dir"
        # For image validation, we'd need to mount or inspect it
        # For now, validate the image directory structure
        [[ -d "$image_dir" ]] || die "Image directory not found: $image_dir"
        # Could add more image-specific validation here
    fi
    
    log "Validating system state in: $source_root"
    python3 "$SCRIPT_DIR/lib/sonic_state.py" validate --source "$source_root" ${DRY_RUN:+--dry-run}
}

# Power user workflows - thin wrappers around existing tools
workflow_overlay() {
    local subcmd="${1:-}"; shift || true
    case "$subcmd" in
        prepare|activate|unmount)
            "$SCRIPT_DIR/sonic-overlay.sh" "$subcmd" "$@"
            ;;
        -h|--help|"")
            cat <<HELP
sonic overlay - Manual overlay management (power users)

USAGE:
  sonic overlay <command> [options]

COMMANDS:
  prepare    Prepare overlay filesystem
  activate   Activate prepared overlay
  unmount    Unmount overlay

For detailed help: sonic overlay <command> --help
Or use the original tool directly: sonic-overlay.sh
HELP
            exit 0 ;;
        *) die "Unknown overlay command: $subcmd" ;;
    esac
}

workflow_state() {
    local subcmd="${1:-}"; shift || true
    case "$subcmd" in
        backup|restore|migrate|validate)
            python3 "$SCRIPT_DIR/lib/sonic_state.py" "$subcmd" "$@" ${DRY_RUN:+--dry-run}
            ;;
        -h|--help|"")
            cat <<HELP
sonic state - Direct state management operations (power users)

USAGE:
  sonic state <command> [options]

COMMANDS:
  backup     Create state backup
  restore    Restore state from backup  
  migrate    Migrate state between filesystems
  validate   Validate state components

For detailed help: sonic state <command> --help
Or use the Python tool directly: python3 lib/sonic_state.py
HELP
            exit 0 ;;
        *) die "Unknown state command: $subcmd" ;;
    esac
}

main() {
    # Parse global options first (before root check for help)
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --dry-run|-n) export DRY_RUN=1; shift ;;
            --quiet|-q) export NO_HANDHOLDING=1; shift ;;
            -h|--help) usage; exit 0 ;;
            -*) die "Unknown global option: $1" ;;
            *) break ;;  # Not a global option, must be workflow
        esac
    done
    
    local workflow="${1:-}"; shift || true
    
    # Check for help before requiring root
    if [[ "$workflow" == "" || "$workflow" == "-h" || "$workflow" == "--help" ]]; then
        usage; exit 0
    fi
    
    # Also allow help for subcommands without root
    if [[ $# -gt 0 && ("$1" == "-h" || "$1" == "--help") ]]; then
        # Let the workflow handle its own help
        case "$workflow" in
            save) workflow_save "$@"; exit 0 ;;
            install) workflow_install "$@"; exit 0 ;;
            reinstall) workflow_reinstall "$@"; exit 0 ;;
            customize) workflow_customize "$@"; exit 0 ;;
            validate) workflow_validate "$@"; exit 0 ;;
            overlay) workflow_overlay "$@"; exit 0 ;;
            state) workflow_state "$@"; exit 0 ;;
        esac
    fi
    
    # Now require root for actual operations
    need_root
    
    case "$workflow" in
        save) workflow_save "$@" ;;
        install) workflow_install "$@" ;;
        reinstall) workflow_reinstall "$@" ;;
        customize) workflow_customize "$@" ;;
        validate) workflow_validate "$@" ;;
        overlay) workflow_overlay "$@" ;;
        state) workflow_state "$@" ;;
        -h|--help|"") usage; exit 0 ;;
        *) die "Unknown workflow: $workflow. Use 'sonic-upgrade-helper --help' for available workflows." ;;
    esac
}

main "$@"